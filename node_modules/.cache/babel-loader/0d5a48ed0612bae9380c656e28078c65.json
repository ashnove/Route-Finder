{"ast":null,"code":"import PriorityQueue from \"priorityqueue\"; // Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\n\nconst comparator = (nodeA, nodeB) => {\n  let a = node;\n};\n\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const pq = new PriorityQueue({\n    comparator\n  });\n\n  for (const row of grid) {\n    for (const node of row) {\n      pq.push(node);\n    }\n  } // const unvisitedNodes = getAllNodes(grid);\n\n\n  while (!pq.isEmpty()) {\n    //   sortNodesByDistance(unvisitedNodes);\n    const closestNode = pq.top();\n    pq.pop(); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n} //   function sortNodesByDistance(unvisitedNodes) {\n//     unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n//   }\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n} //   function getAllNodes(grid) {\n//     const nodes = [];\n//     for (const row of grid) {\n//       for (const node of row) {\n//         nodes.push(node);\n//       }\n//     }\n//     return nodes;\n//   }\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/home/ashnove/Documents/PROJECT MATERIALS/PathFinding Demo/pathfind/src/visualiser/Algorithms/dikjstra.js"],"names":["PriorityQueue","comparator","nodeA","nodeB","a","node","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","pq","row","push","isEmpty","closestNode","top","pop","isWall","Infinity","isVisited","updateUnvisitedNeighbors","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","length","filter","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["import PriorityQueue from \"priorityqueue\";\n\n// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nconst comparator = (nodeA, nodeB) => {\n\n    let a = node\n    \n}\n\nexport function dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n\n    const pq = new PriorityQueue({comparator});\n    for (const row of grid) {\n      for (const node of row) {\n        pq.push(node);\n      }\n    }\n    // const unvisitedNodes = getAllNodes(grid);\n    while (!pq.isEmpty()) {\n    //   sortNodesByDistance(unvisitedNodes);\n      const closestNode = pq.top();\n      pq.pop();\n      // If we encounter a wall, we skip it.\n      if (closestNode.isWall) continue;\n      // If the closest node is at a distance of infinity,\n      // we must be trapped and should therefore stop.\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n  }\n  \n//   function sortNodesByDistance(unvisitedNodes) {\n//     unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n//   }\n  \n  function updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n  }\n  \n  function getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n  }\n  \n//   function getAllNodes(grid) {\n//     const nodes = [];\n//     for (const row of grid) {\n//       for (const node of row) {\n//         nodes.push(node);\n//       }\n//     }\n//     return nodes;\n//   }\n  \n  // Backtracks from the finishNode to find the shortest path.\n  // Only works when called *after* the dijkstra method above.\n  export function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n  }"]},"metadata":{},"sourceType":"module"}