{"ast":null,"code":"import PriorityQueue from \"priorityqueue\"; // Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\n\nclass Pair {\n  constructor(dis, cell) {\n    this.cell = cell;\n    this.dis = dis;\n  }\n\n}\n\nconst comparator = (nodeA, nodeB) => {\n  const a = nodeA.dis;\n  const b = nodeB.dis;\n  return a <= b ? 1 : 0;\n};\n\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const pq = new PriorityQueue({});\n  pq.push(new Pair(0, startNode));\n\n  while (pq.isEmpty() === false) {\n    const from = pq.top().cell;\n    const pq_dis = pq.top().dis; // console.log(pq.top());\n\n    pq.pop();\n    if (pq_dis > from.distance) continue;\n    if (from.isWall) continue;\n    if (from === finishNode) return visitedNodesInOrder;\n    const neighbors = getNeighbors(from, grid);\n    console.log(from);\n\n    for (const to of neighbors) {\n      visitedNodesInOrder.push(from);\n\n      if (pq_dis + 1 < to.distance) {\n        to.distance = from.distance + 1;\n        to.previousNode = from; //   console.log(to.row + ' ' + to.col);\n\n        pq.push(new Pair(to.distance, to));\n        console.log(pq); //   if(from == startNode)console.log(pq);\n      }\n    }\n  } // return visitedNodesInOrder;\n\n}\n\nfunction getNeighbors(node, grid) {\n  const neighbors = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["/home/ashnove/Documents/PROJECT MATERIALS/PathFinding Demo/pathfind/src/visualiser/Algorithms/dikjstra.js"],"names":["PriorityQueue","Pair","constructor","dis","cell","comparator","nodeA","nodeB","a","b","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","pq","push","isEmpty","from","top","pq_dis","pop","isWall","neighbors","getNeighbors","console","log","to","previousNode","node","col","row","length","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["import PriorityQueue from \"priorityqueue\";\n\n// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nclass Pair {\n    constructor(dis, cell){\n        this.cell = cell;\n        this.dis = dis;\n    }\n}\n\nconst comparator = (nodeA, nodeB) => {\n\n    const a = nodeA.dis;\n    const b = nodeB.dis;\n    return (a <= b ? 1 : 0);    \n}\n\nexport function dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    \n    const pq = new PriorityQueue({});\n    pq.push(new Pair(0, startNode));\n    while (pq.isEmpty() === false) {\n        \n        const from = pq.top().cell;\n        const pq_dis = pq.top().dis;\n        // console.log(pq.top());\n      pq.pop();\n      \n      if(pq_dis > from.distance) continue;\n      if (from.isWall) continue;\n      if (from === finishNode) return visitedNodesInOrder;\n      const neighbors = getNeighbors(from, grid);\n      \n      console.log(from);\n      for (const to of neighbors) {\n          visitedNodesInOrder.push(from);\n          if( pq_dis + 1  < to.distance ){\n              to.distance = from.distance + 1;\n              to.previousNode = from;\n            //   console.log(to.row + ' ' + to.col);\n              pq.push(new Pair(to.distance, to));\n              console.log(pq);\n            //   if(from == startNode)console.log(pq);\n            }\n      }\n    }\n    // return visitedNodesInOrder;\n  }\n  \n  function getNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors;\n  }\n  \n  // Backtracks from the finishNode to find the shortest path.\n  // Only works when called *after* the dijkstra method above.\n  export function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n  }"]},"metadata":{},"sourceType":"module"}