{"ast":null,"code":"const dfsTree = [];\nlet ok = 0;\n\nfunction dfs(from, grid, end) {\n  from.isVisited = true;\n  const children = getChildren(from, grid);\n\n  for (const to of children) {\n    if (to.isWall) continue;\n    if (ok) return;\n\n    if (!to.isVisited) {\n      dfsTree.push(from);\n      to.previousNode = from;\n\n      if (to === end) {\n        ok = 1;\n        return;\n      }\n\n      dfs(to, grid, end);\n    }\n  }\n}\n\nexport function depthFirstSearch(start, end, grid) {\n  dfs(start, grid, end);\n  return dfsTree;\n}\nexport function getPath(end) {\n  const path = [];\n  let curr = end;\n\n  while (curr !== null) {\n    path.unshift(curr);\n    curr = curr.previousNode;\n  }\n\n  return path;\n}\n\nfunction getChildren(node, grid) {\n  const children = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row < grid.length - 1) children.push(grid[row + 1][col]);\n  if (col < grid[0].length - 1) children.push(grid[row][col + 1]);\n  if (row > 0) children.push(grid[row - 1][col]);\n  if (col > 0) children.push(grid[row][col - 1]);\n  return children;\n}","map":{"version":3,"sources":["/home/ashnove/Documents/PROJECT MATERIALS/PathFinding Demo/pathfind/src/simulator/Algorithms/dfs.js"],"names":["dfsTree","ok","dfs","from","grid","end","isVisited","children","getChildren","to","isWall","push","previousNode","depthFirstSearch","start","getPath","path","curr","unshift","node","col","row","length"],"mappings":"AAAA,MAAMA,OAAO,GAAG,EAAhB;AACA,IAAIC,EAAE,GAAG,CAAT;;AACA,SAASC,GAAT,CAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA6B;AACzBF,EAAAA,IAAI,CAACG,SAAL,GAAiB,IAAjB;AACA,QAAMC,QAAQ,GAAGC,WAAW,CAACL,IAAD,EAAOC,IAAP,CAA5B;;AACA,OAAI,MAAMK,EAAV,IAAgBF,QAAhB,EAAyB;AACrB,QAAGE,EAAE,CAACC,MAAN,EAAc;AACd,QAAGT,EAAH,EAAO;;AACP,QAAG,CAACQ,EAAE,CAACH,SAAP,EAAiB;AACbN,MAAAA,OAAO,CAACW,IAAR,CAAaR,IAAb;AACAM,MAAAA,EAAE,CAACG,YAAH,GAAkBT,IAAlB;;AACA,UAAGM,EAAE,KAAKJ,GAAV,EAAe;AAAEJ,QAAAA,EAAE,GAAG,CAAL;AAAS;AAAQ;;AAClCC,MAAAA,GAAG,CAACO,EAAD,EAAKL,IAAL,EAAWC,GAAX,CAAH;AACH;AACJ;AACJ;;AACD,OAAO,SAASQ,gBAAT,CAA0BC,KAA1B,EAAiCT,GAAjC,EAAsCD,IAAtC,EAA2C;AAC9CF,EAAAA,GAAG,CAACY,KAAD,EAAQV,IAAR,EAAcC,GAAd,CAAH;AACA,SAAOL,OAAP;AACH;AACD,OAAO,SAASe,OAAT,CAAiBV,GAAjB,EAAsB;AACzB,QAAMW,IAAI,GAAG,EAAb;AACA,MAAIC,IAAI,GAAGZ,GAAX;;AACA,SAAOY,IAAI,KAAK,IAAhB,EAAsB;AACpBD,IAAAA,IAAI,CAACE,OAAL,CAAaD,IAAb;AACAA,IAAAA,IAAI,GAAGA,IAAI,CAACL,YAAZ;AACD;;AACD,SAAOI,IAAP;AACH;;AACD,SAASR,WAAT,CAAqBW,IAArB,EAA2Bf,IAA3B,EAAiC;AAC7B,QAAMG,QAAQ,GAAG,EAAjB;AACA,QAAM;AAACa,IAAAA,GAAD;AAAMC,IAAAA;AAAN,MAAaF,IAAnB;AACA,MAAIE,GAAG,GAAGjB,IAAI,CAACkB,MAAL,GAAc,CAAxB,EAA2Bf,QAAQ,CAACI,IAAT,CAAcP,IAAI,CAACiB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAd;AAC3B,MAAIA,GAAG,GAAGhB,IAAI,CAAC,CAAD,CAAJ,CAAQkB,MAAR,GAAiB,CAA3B,EAA8Bf,QAAQ,CAACI,IAAT,CAAcP,IAAI,CAACiB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAd;AAC9B,MAAIC,GAAG,GAAG,CAAV,EAAad,QAAQ,CAACI,IAAT,CAAcP,IAAI,CAACiB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAd;AACb,MAAIA,GAAG,GAAG,CAAV,EAAab,QAAQ,CAACI,IAAT,CAAcP,IAAI,CAACiB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAd;AACb,SAAOb,QAAP;AACH","sourcesContent":["const dfsTree = [];\nlet ok = 0;\nfunction dfs(from, grid, end){\n    from.isVisited = true;\n    const children = getChildren(from, grid);\n    for(const to of children){\n        if(to.isWall) continue;\n        if(ok) return;\n        if(!to.isVisited){\n            dfsTree.push(from);\n            to.previousNode = from;\n            if(to === end) { ok = 1 ; return;}\n            dfs(to, grid, end);  \n        }\n    }\n}\nexport function depthFirstSearch(start, end, grid){\n    dfs(start, grid, end);\n    return dfsTree;\n}\nexport function getPath(end) {\n    const path = [];\n    let curr = end;\n    while (curr !== null) {\n      path.unshift(curr);\n      curr = curr.previousNode;\n    }\n    return path;\n}\nfunction getChildren(node, grid) {\n    const children = [];\n    const {col, row} = node;\n    if (row < grid.length - 1) children.push(grid[row + 1][col]);\n    if (col < grid[0].length - 1) children.push(grid[row][col + 1]);\n    if (row > 0) children.push(grid[row - 1][col]);\n    if (col > 0) children.push(grid[row][col - 1]);\n    return children;\n}"]},"metadata":{},"sourceType":"module"}