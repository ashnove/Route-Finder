{"ast":null,"code":"const dfsTree = [];\n\nfunction dfs(from, grid, end) {\n  from.isVisited = true;\n  const children = getChildren(from, grid);\n\n  for (const to of children) {\n    if (!to.isVisited) {\n      dfsTree.push(from);\n      to.previousNode = from;\n      if (to === end) return;\n      dfs(to, grid, end);\n    }\n  }\n}\n\nexport function depthFirstSearch(start, end, grid) {\n  dfs(start, grid, end);\n  return dfsTree;\n}\n\nfunction getChildren(node, grid) {\n  const children = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row < grid.length - 1) children.push(grid[row + 1][col]);\n  if (row > 0) children.push(grid[row - 1][col]);\n  if (col < grid[0].length - 1) children.push(grid[row][col + 1]);\n  if (col > 0) children.push(grid[row][col - 1]);\n  return children;\n}\n\nexport function getPath(end) {\n  const path = [];\n  let curr = end;\n\n  while (curr !== null) {\n    path.unshift(curr);\n    curr = curr.previousNode;\n  }\n\n  return path;\n}","map":{"version":3,"sources":["/home/ashnove/Documents/PROJECT MATERIALS/PathFinding Demo/pathfind/src/visualiser/Algorithms/dfs.js"],"names":["dfsTree","dfs","from","grid","end","isVisited","children","getChildren","to","push","previousNode","depthFirstSearch","start","node","col","row","length","getPath","path","curr","unshift"],"mappings":"AAAA,MAAMA,OAAO,GAAG,EAAhB;;AAEA,SAASC,GAAT,CAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA6B;AAEzBF,EAAAA,IAAI,CAACG,SAAL,GAAiB,IAAjB;AACA,QAAMC,QAAQ,GAAGC,WAAW,CAACL,IAAD,EAAOC,IAAP,CAA5B;;AACA,OAAI,MAAMK,EAAV,IAAgBF,QAAhB,EAAyB;AAErB,QAAG,CAACE,EAAE,CAACH,SAAP,EAAiB;AACbL,MAAAA,OAAO,CAACS,IAAR,CAAaP,IAAb;AACAM,MAAAA,EAAE,CAACE,YAAH,GAAkBR,IAAlB;AACA,UAAGM,EAAE,KAAKJ,GAAV,EAAe;AACfH,MAAAA,GAAG,CAACO,EAAD,EAAKL,IAAL,EAAWC,GAAX,CAAH;AAEH;AACJ;AACJ;;AAED,OAAO,SAASO,gBAAT,CAA0BC,KAA1B,EAAiCR,GAAjC,EAAsCD,IAAtC,EAA2C;AAE9CF,EAAAA,GAAG,CAACW,KAAD,EAAQT,IAAR,EAAcC,GAAd,CAAH;AACA,SAAOJ,OAAP;AAEH;;AAED,SAASO,WAAT,CAAqBM,IAArB,EAA2BV,IAA3B,EAAiC;AAC7B,QAAMG,QAAQ,GAAG,EAAjB;AACA,QAAM;AAACQ,IAAAA,GAAD;AAAMC,IAAAA;AAAN,MAAaF,IAAnB;AACA,MAAIE,GAAG,GAAGZ,IAAI,CAACa,MAAL,GAAc,CAAxB,EAA2BV,QAAQ,CAACG,IAAT,CAAcN,IAAI,CAACY,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAd;AAC3B,MAAIC,GAAG,GAAG,CAAV,EAAaT,QAAQ,CAACG,IAAT,CAAcN,IAAI,CAACY,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAd;AACb,MAAIA,GAAG,GAAGX,IAAI,CAAC,CAAD,CAAJ,CAAQa,MAAR,GAAiB,CAA3B,EAA8BV,QAAQ,CAACG,IAAT,CAAcN,IAAI,CAACY,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAd;AAC9B,MAAIA,GAAG,GAAG,CAAV,EAAaR,QAAQ,CAACG,IAAT,CAAcN,IAAI,CAACY,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAd;AACb,SAAOR,QAAP;AACH;;AAEC,OAAO,SAASW,OAAT,CAAiBb,GAAjB,EAAsB;AAC3B,QAAMc,IAAI,GAAG,EAAb;AACA,MAAIC,IAAI,GAAGf,GAAX;;AACA,SAAOe,IAAI,KAAK,IAAhB,EAAsB;AACpBD,IAAAA,IAAI,CAACE,OAAL,CAAaD,IAAb;AACAA,IAAAA,IAAI,GAAGA,IAAI,CAACT,YAAZ;AACD;;AACD,SAAOQ,IAAP;AACD","sourcesContent":["const dfsTree = [];\n\nfunction dfs(from, grid, end){\n\n    from.isVisited = true;\n    const children = getChildren(from, grid);\n    for(const to of children){\n        \n        if(!to.isVisited){\n            dfsTree.push(from);\n            to.previousNode = from;\n            if(to === end) return;\n            dfs(to, grid, end);\n            \n        }\n    }\n}\n\nexport function depthFirstSearch(start, end, grid){\n\n    dfs(start, grid, end);\n    return dfsTree;\n\n}\n\nfunction getChildren(node, grid) {\n    const children = [];\n    const {col, row} = node;\n    if (row < grid.length - 1) children.push(grid[row + 1][col]);\n    if (row > 0) children.push(grid[row - 1][col]);\n    if (col < grid[0].length - 1) children.push(grid[row][col + 1]);\n    if (col > 0) children.push(grid[row][col - 1]);\n    return children;\n}\n  \n  export function getPath(end) {\n    const path = [];\n    let curr = end;\n    while (curr !== null) {\n      path.unshift(curr);\n      curr = curr.previousNode;\n    }\n    return path;\n  }"]},"metadata":{},"sourceType":"module"}