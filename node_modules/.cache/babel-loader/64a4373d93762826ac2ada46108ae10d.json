{"ast":null,"code":"var _jsxFileName = \"/home/ashnove/Documents/PROJECT MATERIALS/PathFinding Demo/pathfind/src/visualiser/visualiser.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node'; // import {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport './visualiser.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst FINISH_NODE_ROW = 19;\nconst FINISH_NODE_COL = 49;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid\",\n        children: grid.map((row, rowIdx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: row.map((node, nodeIdx) => {\n              const {\n                row,\n                col,\n                isFinish,\n                isStart,\n                isWall\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                col: col,\n                isFinish: isFinish,\n                isStart: isStart,\n                isWall: isWall,\n                mouseIsPressed: mouseIsPressed,\n                onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n                onMouseUp: () => this.handleMouseUp(),\n                row: row\n              }, nodeIdx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 21\n              }, this);\n            })\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/home/ashnove/Documents/PROJECT MATERIALS/PathFinding Demo/pathfind/src/visualiser/visualiser.jsx"],"names":["React","Component","Node","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateShortestPath","nodesInShortestPathOrder","i","length","setTimeout","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","visitedNodesInOrder","dijkstra","getNodesInShortestPathOrder","animateDijkstra","render","map","rowIdx","nodeIdx","isFinish","isStart","isWall","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/Node';\n// import {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport './visualiser.css';\n\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst FINISH_NODE_ROW = 19;\nconst FINISH_NODE_COL = 49;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n  \n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <>\n        {/* <button onClick={() => this.visualizeDijkstra()}>\n          Visualize Dijkstra's Algorithm\n        </button> */}\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n"]},"metadata":{},"sourceType":"module"}