{"ast":null,"code":"import _createForOfIteratorHelper from\"/home/ashnove/Documents/PROJECT MATERIALS/PathFinding Demo/route-finder/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";var dfsTree=[];var ok=0;function dfs(from,grid,end){from.isVisited=true;var children=getChildren(from,grid);var _iterator=_createForOfIteratorHelper(children),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var to=_step.value;if(to.isWall)continue;if(ok)return;if(!to.isVisited){dfsTree.push(from);to.previousNode=from;if(to===end){ok=1;return;}dfs(to,grid,end);}}}catch(err){_iterator.e(err);}finally{_iterator.f();}}export function depthFirstSearch(start,end,grid){dfs(start,grid,end);return dfsTree;}export function getPath(end){var path=[];var curr=end;while(curr!==null){path.unshift(curr);curr=curr.previousNode;}return path;}function getChildren(node,grid){var children=[];var col=node.col,row=node.row;if(row<grid.length-1)children.push(grid[row+1][col]);if(col<grid[0].length-1)children.push(grid[row][col+1]);if(row>0)children.push(grid[row-1][col]);if(col>0)children.push(grid[row][col-1]);return children;}","map":{"version":3,"sources":["/home/ashnove/Documents/PROJECT MATERIALS/PathFinding Demo/route-finder/src/simulator/Algorithms/dfs.js"],"names":["dfsTree","ok","dfs","from","grid","end","isVisited","children","getChildren","to","isWall","push","previousNode","depthFirstSearch","start","getPath","path","curr","unshift","node","col","row","length"],"mappings":"kLAAA,GAAMA,CAAAA,OAAO,CAAG,EAAhB,CACA,GAAIC,CAAAA,EAAE,CAAG,CAAT,CACA,QAASC,CAAAA,GAAT,CAAaC,IAAb,CAAmBC,IAAnB,CAAyBC,GAAzB,CAA6B,CACzBF,IAAI,CAACG,SAAL,CAAiB,IAAjB,CACA,GAAMC,CAAAA,QAAQ,CAAGC,WAAW,CAACL,IAAD,CAAOC,IAAP,CAA5B,CAFyB,yCAGTG,QAHS,YAGzB,+CAAyB,IAAfE,CAAAA,EAAe,aACrB,GAAGA,EAAE,CAACC,MAAN,CAAc,SACd,GAAGT,EAAH,CAAO,OACP,GAAG,CAACQ,EAAE,CAACH,SAAP,CAAiB,CACbN,OAAO,CAACW,IAAR,CAAaR,IAAb,EACAM,EAAE,CAACG,YAAH,CAAkBT,IAAlB,CACA,GAAGM,EAAE,GAAKJ,GAAV,CAAe,CAAEJ,EAAE,CAAG,CAAL,CAAS,OAAQ,CAClCC,GAAG,CAACO,EAAD,CAAKL,IAAL,CAAWC,GAAX,CAAH,CACH,CACJ,CAZwB,qDAa5B,CACD,MAAO,SAASQ,CAAAA,gBAAT,CAA0BC,KAA1B,CAAiCT,GAAjC,CAAsCD,IAAtC,CAA2C,CAC9CF,GAAG,CAACY,KAAD,CAAQV,IAAR,CAAcC,GAAd,CAAH,CACA,MAAOL,CAAAA,OAAP,CACH,CACD,MAAO,SAASe,CAAAA,OAAT,CAAiBV,GAAjB,CAAsB,CACzB,GAAMW,CAAAA,IAAI,CAAG,EAAb,CACA,GAAIC,CAAAA,IAAI,CAAGZ,GAAX,CACA,MAAOY,IAAI,GAAK,IAAhB,CAAsB,CACpBD,IAAI,CAACE,OAAL,CAAaD,IAAb,EACAA,IAAI,CAAGA,IAAI,CAACL,YAAZ,CACD,CACD,MAAOI,CAAAA,IAAP,CACH,CAED,QAASR,CAAAA,WAAT,CAAqBW,IAArB,CAA2Bf,IAA3B,CAAiC,CAC7B,GAAMG,CAAAA,QAAQ,CAAG,EAAjB,CACA,GAAOa,CAAAA,GAAP,CAAmBD,IAAnB,CAAOC,GAAP,CAAYC,GAAZ,CAAmBF,IAAnB,CAAYE,GAAZ,CACA,GAAIA,GAAG,CAAGjB,IAAI,CAACkB,MAAL,CAAc,CAAxB,CAA2Bf,QAAQ,CAACI,IAAT,CAAcP,IAAI,CAACiB,GAAG,CAAG,CAAP,CAAJ,CAAcD,GAAd,CAAd,EAC3B,GAAIA,GAAG,CAAGhB,IAAI,CAAC,CAAD,CAAJ,CAAQkB,MAAR,CAAiB,CAA3B,CAA8Bf,QAAQ,CAACI,IAAT,CAAcP,IAAI,CAACiB,GAAD,CAAJ,CAAUD,GAAG,CAAG,CAAhB,CAAd,EAC9B,GAAIC,GAAG,CAAG,CAAV,CAAad,QAAQ,CAACI,IAAT,CAAcP,IAAI,CAACiB,GAAG,CAAG,CAAP,CAAJ,CAAcD,GAAd,CAAd,EACb,GAAIA,GAAG,CAAG,CAAV,CAAab,QAAQ,CAACI,IAAT,CAAcP,IAAI,CAACiB,GAAD,CAAJ,CAAUD,GAAG,CAAG,CAAhB,CAAd,EACb,MAAOb,CAAAA,QAAP,CACH","sourcesContent":["const dfsTree = [];\nlet ok = 0;\nfunction dfs(from, grid, end){\n    from.isVisited = true;\n    const children = getChildren(from, grid);\n    for(const to of children){\n        if(to.isWall) continue;\n        if(ok) return;\n        if(!to.isVisited){\n            dfsTree.push(from);\n            to.previousNode = from;\n            if(to === end) { ok = 1 ; return;}\n            dfs(to, grid, end);  \n        }\n    }\n}\nexport function depthFirstSearch(start, end, grid){\n    dfs(start, grid, end);\n    return dfsTree;\n}\nexport function getPath(end) {\n    const path = [];\n    let curr = end;\n    while (curr !== null) {\n      path.unshift(curr);\n      curr = curr.previousNode;\n    }\n    return path;\n}\n\nfunction getChildren(node, grid) {\n    const children = [];\n    const {col, row} = node;\n    if (row < grid.length - 1) children.push(grid[row + 1][col]);\n    if (col < grid[0].length - 1) children.push(grid[row][col + 1]);\n    if (row > 0) children.push(grid[row - 1][col]);\n    if (col > 0) children.push(grid[row][col - 1]);\n    return children;\n}"]},"metadata":{},"sourceType":"module"}