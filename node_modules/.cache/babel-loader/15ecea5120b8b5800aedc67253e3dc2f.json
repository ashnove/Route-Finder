{"ast":null,"code":"var _jsxFileName = \"/home/ashnove/Documents/PROJECT MATERIALS/PathFinding Demo/pathfind/src/visualiser/visualiser.jsx\";\nimport React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport { Button, Navbar } from \"react-bootstrap\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"./Algorithms/dikjstra\"; // import \"../logos/target_1.png\";\n\nimport \"./visualiser.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 12;\nconst START_NODE_COL = 1;\nconst FINISH_NODE_ROW = 12;\nconst FINISH_NODE_COL = 52;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      const node = visitedNodesInOrder[i];\n      if (START_NODE_ROW === node.row && START_NODE_COL === node.col) continue;\n      if (FINISH_NODE_ROW === node.row && FINISH_NODE_COL === node.col) continue;\n      console.log(`animating`);\n      setTimeout(() => {\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-visited\";\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      const node = nodesInShortestPathOrder[i];\n      if (START_NODE_ROW === node.row && START_NODE_COL === node.col) continue;\n\n      if (FINISH_NODE_ROW === node.row && FINISH_NODE_COL === node.col) {\n        continue;\n      }\n\n      setTimeout(() => {\n        document.getElementById(`node-${node.row}-${node.col}`).className = \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  clearBoard() {\n    const {\n      grid\n    } = this.state;\n    const newGrid = grid.slice();\n\n    for (let row = 0; row < 24; row++) {\n      for (let col = 0; col < 54; col++) {\n        const node = newGrid[row][col];\n        const newNode = { ...node,\n          isWall: false,\n          isStart: START_NODE_ROW === row && START_NODE_COL === col ? true : false,\n          isFinish: FINISH_NODE_ROW === row && FINISH_NODE_COL === col ? true : false\n        };\n        newGrid[row][col] = newNode;\n      }\n    }\n\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  fullWall() {\n    for (let row = 0; row < 24; row++) {\n      for (let col = 0; col < 54; col++) {\n        if (START_NODE_ROW === row && START_NODE_COL === col) continue;\n        if (FINISH_NODE_ROW === row && FINISH_NODE_COL === col) continue;\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col, true);\n        this.setState({\n          grid: newGrid\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        bg: \"dark\",\n        variant: \"dark\",\n        children: [/*#__PURE__*/_jsxDEV(Navbar.Brand, {\n          href: \"root\",\n          children: \"Path Finding Visualiser\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"topRow\",\n          variant: \"light\",\n          onClick: () => this.visualizeDijkstra(),\n          children: \"Visualize Dijkstra's Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n          className: \"topRow\",\n          variant: \"secondary\",\n          onClick: () => this.clearBoard(),\n          children: \"Draw Maze\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n          className: \"topRow\",\n          variant: \"secondary\",\n          onClick: () => this.fullWall(),\n          children: \"Draw Path\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"sidebar\",\n          href: \"root\",\n          variant: \"warning\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: grid.map((row, rowIdx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: row.map((node, nodeIdx) => {\n              const {\n                row,\n                col,\n                isFinish,\n                isStart,\n                isWall\n              } = node;\n              return /*#__PURE__*/_jsxDEV(Node, {\n                col: col,\n                isFinish: isFinish,\n                isStart: isStart,\n                isWall: isWall,\n                mouseIsPressed: mouseIsPressed,\n                onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n                onMouseUp: () => this.handleMouseUp(),\n                row: row\n              }, nodeIdx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 21\n              }, this);\n            })\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 24; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 54; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col, allWall = false) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: allWall ? true : !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/home/ashnove/Documents/PROJECT MATERIALS/PathFinding Demo/pathfind/src/visualiser/visualiser.jsx"],"names":["React","Component","Node","Button","Navbar","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","console","log","document","getElementById","className","visualizeDijkstra","startNode","finishNode","clearBoard","slice","newNode","isWall","isStart","isFinish","fullWall","render","map","rowIdx","nodeIdx","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","allWall"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport { Button, Navbar } from \"react-bootstrap\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"./Algorithms/dikjstra\";\n// import \"../logos/target_1.png\";\n\nimport \"./visualiser.css\";\n\nconst START_NODE_ROW = 12;\nconst START_NODE_COL = 1;\nconst FINISH_NODE_ROW = 12;\nconst FINISH_NODE_COL = 52;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length ; i++) {\n        \n        if (i === visitedNodesInOrder.length) {\n            setTimeout(() => {\n                this.animateShortestPath(nodesInShortestPathOrder);\n            }, 10 * i);\n            return;\n        }\n\n        const node = visitedNodesInOrder[i];\n        if(START_NODE_ROW===node.row && START_NODE_COL===node.col) continue;\n        if(FINISH_NODE_ROW===node.row && FINISH_NODE_COL===node.col) continue;\n        console.log(`animating`);\n        setTimeout(() => {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-visited\";\n        }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length ; i++) {\n        const node = nodesInShortestPathOrder[i];\n        if(START_NODE_ROW===node.row && START_NODE_COL===node.col) continue;\n        if(FINISH_NODE_ROW===node.row && FINISH_NODE_COL===node.col) {\n            \n            continue;\n        }\n        setTimeout(() => {\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n            \"node node-shortest-path\";\n        }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  clearBoard() {\n    const { grid } = this.state;\n    const newGrid = grid.slice();\n    for (let row = 0; row < 24; row++) {\n      for (let col = 0; col < 54; col++) {\n        const node = newGrid[row][col];\n        const newNode = {\n          ...node,\n          isWall: false,\n          isStart: START_NODE_ROW===row && START_NODE_COL===col ? true : false,\n          isFinish: FINISH_NODE_ROW===row && FINISH_NODE_COL===col ? true : false\n        };\n        newGrid[row][col] = newNode;\n      }\n    }\n    this.setState({ grid: newGrid });\n  }\n\n  fullWall() {\n    for (let row = 0; row < 24; row++) {\n      for (let col = 0; col < 54; col++) {\n        if(START_NODE_ROW===row && START_NODE_COL===col) continue;\n        if(FINISH_NODE_ROW===row && FINISH_NODE_COL===col) continue;\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col, true);\n        this.setState({ grid: newGrid });\n      }\n    }\n   \n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"root\">Path Finding Visualiser</Navbar.Brand>\n          <Button\n            className=\"topRow\"\n            variant=\"light\"\n            onClick={() => this.visualizeDijkstra()}\n          >\n            Visualize Dijkstra's Algorithm\n          </Button>{\" \"}\n          <Button\n            className=\"topRow\"\n            variant=\"secondary\"\n            onClick={() => this.clearBoard()}\n          >\n            Draw Maze\n          </Button>{\" \"}\n          <Button\n            className=\"topRow\"\n            variant=\"secondary\"\n            onClick={() => this.fullWall()}\n          >\n            Draw Path\n          </Button>\n          <Button className=\"sidebar\" href=\"root\" variant=\"warning\">\n            Reset\n          </Button>\n        </Navbar>\n\n        <div className=\"col\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div className = \"row\" key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                 \n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}\n                    ></Node>\n                    \n                  );\n                  \n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 24; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 54; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col, allWall = false) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: allWall ? true : !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\n"]},"metadata":{},"sourceType":"module"}