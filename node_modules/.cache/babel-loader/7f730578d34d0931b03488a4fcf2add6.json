{"ast":null,"code":"var _jsxFileName = \"/home/ashnove/Documents/PROJECT MATERIALS/PathFinding Demo/pathfind/src/visualiser/visualiser.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { Button } from 'react-bootstrap';\nimport { dijkstra, getNodesInShortestPathOrder } from './Algorithms/dikjstra';\nimport './visualiser.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst FINISH_NODE_ROW = 19;\nconst FINISH_NODE_COL = 49;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  clearBoard() {\n    const {\n      grid\n    } = this.state;\n    const newGrid = grid.slice();\n\n    for (let row = 0; row < 20; row++) {\n      for (let col = 0; col < 50; col++) {\n        const node = newGrid[row][col];\n        const newNode = { ...node,\n          isWall: false\n        };\n        newGrid[row][col] = newNode;\n      }\n    }\n\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  fullWall() {\n    const {\n      grid\n    } = this.state;\n    const newGrid = grid.slice();\n\n    for (let row = 0; row < 20; row++) {\n      for (let col = 0; col < 50; col++) {\n        const node = newGrid[row][col];\n        const newNode = { ...node,\n          isWall: true\n        };\n        newGrid[row][col] = newNode;\n      }\n    }\n\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"screen\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => this.visualizeDijkstra(),\n          children: \"Visualize Dijkstra's Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.clearBoard(),\n          children: \"Draw Maze\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.fullWall(),\n          children: \"Draw Path\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid\",\n          children: grid.map((row, rowIdx) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: row.map((node, nodeIdx) => {\n                const {\n                  row,\n                  col,\n                  isFinish,\n                  isStart,\n                  isWall\n                } = node;\n                return /*#__PURE__*/_jsxDEV(Node, {\n                  col: col,\n                  isFinish: isFinish,\n                  isStart: isStart,\n                  isWall: isWall,\n                  mouseIsPressed: mouseIsPressed,\n                  onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                  onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n                  onMouseUp: () => this.handleMouseUp(),\n                  row: row\n                }, nodeIdx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 25\n                }, this);\n              })\n            }, rowIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 30; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/home/ashnove/Documents/PROJECT MATERIALS/PathFinding Demo/pathfind/src/visualiser/visualiser.jsx"],"names":["React","Component","Node","Button","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","clearBoard","slice","newNode","isWall","fullWall","render","map","rowIdx","nodeIdx","isFinish","isStart","currentRow","push","createNode","distance","Infinity","isVisited","previousNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport { Button } from 'react-bootstrap';\nimport {dijkstra, getNodesInShortestPathOrder} from './Algorithms/dikjstra';\n\nimport './visualiser.css';\n\nconst START_NODE_ROW = 0;\nconst START_NODE_COL = 0;\nconst FINISH_NODE_ROW = 19;\nconst FINISH_NODE_COL = 49;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n  \n  clearBoard(){\n      const {grid} = this.state;\n      const newGrid = grid.slice();\n      for (let row = 0; row < 20; row++) {\n        for (let col = 0; col < 50; col++) {\n            const node = newGrid[row][col];\n            const newNode = {\n              ...node,\n              isWall: false,\n            };\n            newGrid[row][col] = newNode;\n        }\n      }\n      this.setState({grid: newGrid});\n  }\n\n  fullWall(){\n    const {grid} = this.state;\n    const newGrid = grid.slice();\n    for (let row = 0; row < 20; row++) {\n      for (let col = 0; col < 50; col++) {\n          const node = newGrid[row][col];\n          const newNode = {\n            ...node,\n            isWall: true,\n          };\n          newGrid[row][col] = newNode;\n      }\n    }\n    this.setState({grid: newGrid});\n}\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <>\n        <div className=\"screen\">\n            <Button onClick={() => this.visualizeDijkstra()}>\n            Visualize Dijkstra's Algorithm\n            </Button>\n            <button onClick={() => this.clearBoard()}>\n            Draw Maze\n            </button>\n            <button onClick={() => this.fullWall()}>\n            Draw Path\n            </button>\n            <div className=\"grid\">\n            {grid.map((row, rowIdx) => {\n                return (\n                <div key={rowIdx}>\n                    {row.map((node, nodeIdx) => {\n                    const {row, col, isFinish, isStart, isWall} = node;\n                    return (\n                        <Node\n                        key={nodeIdx}\n                        col={col}\n                        isFinish={isFinish}\n                        isStart={isStart}\n                        isWall={isWall}\n                        mouseIsPressed={mouseIsPressed}\n                        onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                        onMouseEnter={(row, col) =>\n                            this.handleMouseEnter(row, col)\n                        }\n                        onMouseUp={() => this.handleMouseUp()}\n                        row={row}></Node>\n                    );\n                    })}\n                </div>\n                );\n            })}\n            </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 30; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n"]},"metadata":{},"sourceType":"module"}