{"ast":null,"code":"const dfsTree = [];\n\nfunction dfs(from, grid, end) {\n  from.isVisited = true;\n  const children = getChildren(from, grid);\n  let ok = 0;\n\n  for (const to of children) {\n    if (to.isWall) continue;\n\n    if (!to.isVisited) {\n      dfsTree.push(from);\n      to.previousNode = from;\n\n      if (to === end) {\n        ok = 1;\n        break;\n      }\n\n      dfs(to, grid, end);\n    }\n  }\n\n  if (ok) return;\n}\n\nexport function depthFirstSearch(start, end, grid) {\n  dfs(start, grid, end);\n  return dfsTree;\n}\n\nfunction getChildren(node, grid) {\n  const children = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row < grid.length - 1) children.push(grid[row + 1][col]);\n  if (col < grid[0].length - 1) children.push(grid[row][col + 1]);\n  if (row > 0) children.push(grid[row - 1][col]);\n  if (col > 0) children.push(grid[row][col - 1]);\n  return children;\n}\n\nexport function getPath(end) {\n  const path = [];\n  let curr = end;\n\n  while (curr !== null) {\n    path.unshift(curr);\n    curr = curr.previousNode;\n  }\n\n  return path;\n}","map":{"version":3,"sources":["/home/ashnove/Documents/PROJECT MATERIALS/PathFinding Demo/pathfind/src/visualiser/Algorithms/dfs.js"],"names":["dfsTree","dfs","from","grid","end","isVisited","children","getChildren","ok","to","isWall","push","previousNode","depthFirstSearch","start","node","col","row","length","getPath","path","curr","unshift"],"mappings":"AAAA,MAAMA,OAAO,GAAG,EAAhB;;AAEA,SAASC,GAAT,CAAaC,IAAb,EAAmBC,IAAnB,EAAyBC,GAAzB,EAA6B;AAEzBF,EAAAA,IAAI,CAACG,SAAL,GAAiB,IAAjB;AACA,QAAMC,QAAQ,GAAGC,WAAW,CAACL,IAAD,EAAOC,IAAP,CAA5B;AACA,MAAIK,EAAE,GAAG,CAAT;;AACA,OAAI,MAAMC,EAAV,IAAgBH,QAAhB,EAAyB;AACrB,QAAGG,EAAE,CAACC,MAAN,EAAc;;AACd,QAAG,CAACD,EAAE,CAACJ,SAAP,EAAiB;AACbL,MAAAA,OAAO,CAACW,IAAR,CAAaT,IAAb;AACAO,MAAAA,EAAE,CAACG,YAAH,GAAkBV,IAAlB;;AACA,UAAGO,EAAE,KAAKL,GAAV,EAAe;AAAEI,QAAAA,EAAE,GAAG,CAAL;AAAQ;AAAO;;AAChCP,MAAAA,GAAG,CAACQ,EAAD,EAAKN,IAAL,EAAWC,GAAX,CAAH;AAEH;AACJ;;AACD,MAAGI,EAAH,EACI;AACP;;AAED,OAAO,SAASK,gBAAT,CAA0BC,KAA1B,EAAiCV,GAAjC,EAAsCD,IAAtC,EAA2C;AAE9CF,EAAAA,GAAG,CAACa,KAAD,EAAQX,IAAR,EAAcC,GAAd,CAAH;AACA,SAAOJ,OAAP;AAEH;;AAED,SAASO,WAAT,CAAqBQ,IAArB,EAA2BZ,IAA3B,EAAiC;AAC7B,QAAMG,QAAQ,GAAG,EAAjB;AACA,QAAM;AAACU,IAAAA,GAAD;AAAMC,IAAAA;AAAN,MAAaF,IAAnB;AACA,MAAIE,GAAG,GAAGd,IAAI,CAACe,MAAL,GAAc,CAAxB,EAA2BZ,QAAQ,CAACK,IAAT,CAAcR,IAAI,CAACc,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAd;AAC3B,MAAIA,GAAG,GAAGb,IAAI,CAAC,CAAD,CAAJ,CAAQe,MAAR,GAAiB,CAA3B,EAA8BZ,QAAQ,CAACK,IAAT,CAAcR,IAAI,CAACc,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAd;AAC9B,MAAIC,GAAG,GAAG,CAAV,EAAaX,QAAQ,CAACK,IAAT,CAAcR,IAAI,CAACc,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAd;AACb,MAAIA,GAAG,GAAG,CAAV,EAAaV,QAAQ,CAACK,IAAT,CAAcR,IAAI,CAACc,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAd;AACb,SAAOV,QAAP;AACH;;AAEC,OAAO,SAASa,OAAT,CAAiBf,GAAjB,EAAsB;AAC3B,QAAMgB,IAAI,GAAG,EAAb;AACA,MAAIC,IAAI,GAAGjB,GAAX;;AACA,SAAOiB,IAAI,KAAK,IAAhB,EAAsB;AACpBD,IAAAA,IAAI,CAACE,OAAL,CAAaD,IAAb;AACAA,IAAAA,IAAI,GAAGA,IAAI,CAACT,YAAZ;AACD;;AACD,SAAOQ,IAAP;AACD","sourcesContent":["const dfsTree = [];\n\nfunction dfs(from, grid, end){\n\n    from.isVisited = true;\n    const children = getChildren(from, grid);\n    let ok = 0;\n    for(const to of children){\n        if(to.isWall) continue;\n        if(!to.isVisited){\n            dfsTree.push(from);\n            to.previousNode = from;\n            if(to === end) { ok = 1; break;}\n            dfs(to, grid, end);\n            \n        }\n    }\n    if(ok)\n        return;\n}\n\nexport function depthFirstSearch(start, end, grid){\n\n    dfs(start, grid, end);\n    return dfsTree;\n\n}\n\nfunction getChildren(node, grid) {\n    const children = [];\n    const {col, row} = node;\n    if (row < grid.length - 1) children.push(grid[row + 1][col]);\n    if (col < grid[0].length - 1) children.push(grid[row][col + 1]);\n    if (row > 0) children.push(grid[row - 1][col]);\n    if (col > 0) children.push(grid[row][col - 1]);\n    return children;\n}\n  \n  export function getPath(end) {\n    const path = [];\n    let curr = end;\n    while (curr !== null) {\n      path.unshift(curr);\n      curr = curr.previousNode;\n    }\n    return path;\n  }"]},"metadata":{},"sourceType":"module"}