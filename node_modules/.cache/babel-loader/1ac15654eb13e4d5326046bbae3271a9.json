{"ast":null,"code":"import PriorityQueue from \"priorityqueue\";\n\nclass Pair {\n  constructor(dis, cell) {\n    this.cell = cell;\n    this.dis = dis;\n  }\n\n}\n\nconst comparator = (nodeA, nodeB) => {\n  const a = nodeA.dis;\n  const b = nodeB.dis;\n  return a < b ? 1 : a > b ? -1 : 0;\n};\n\nexport function dijkstra(grid, start, end) {\n  const visitedNodesInOrder = [];\n  start.distance = 0;\n  const pq = new PriorityQueue({\n    comparator\n  });\n  pq.push(new Pair(0, start));\n\n  while (pq.isEmpty() === false) {\n    const from = pq.top().cell;\n    const pq_dis = pq.top().dis;\n    pq.pop();\n    if (pq_dis > from.distance) continue;\n    if (from.isWall) continue;\n    if (from === end) return visitedNodesInOrder;\n    const neighbors = getChildren(from, grid);\n    console.log(from);\n    visitedNodesInOrder.push(from);\n\n    for (const to of neighbors) {\n      if (pq_dis + 1 < to.distance) {\n        to.distance = from.distance + 1;\n        to.previousNode = from;\n        pq.push(new Pair(to.distance, to));\n        console.log(pq);\n      }\n    }\n  }\n\n  return visitedNodesInOrder;\n}\n\nfunction getChildren(node, grid) {\n  const children = [];\n  const {\n    col,\n    row\n  } = node;\n  if (row < grid.length - 1) children.push(grid[row + 1][col]);\n  if (row > 0) children.push(grid[row - 1][col]);\n  if (col < grid[0].length - 1) children.push(grid[row][col + 1]);\n  if (col > 0) children.push(grid[row][col - 1]);\n  return children;\n}\n\nexport function getShortestPath(end) {\n  const path = [];\n  let curr = end;\n\n  while (curr !== null) {\n    path.unshift(curr);\n    curr = curr.previousNode;\n  }\n\n  return path;\n}","map":{"version":3,"sources":["/home/ashnove/Documents/PROJECT MATERIALS/PathFinding Demo/pathfind/src/simulator/Algorithms/dikjstra.js"],"names":["PriorityQueue","Pair","constructor","dis","cell","comparator","nodeA","nodeB","a","b","dijkstra","grid","start","end","visitedNodesInOrder","distance","pq","push","isEmpty","from","top","pq_dis","pop","isWall","neighbors","getChildren","console","log","to","previousNode","node","children","col","row","length","getShortestPath","path","curr","unshift"],"mappings":"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","sourcesContent":["import PriorityQueue from \"priorityqueue\";\n\nclass Pair {\n    constructor(dis, cell){\n        this.cell = cell;\n        this.dis = dis;\n    }\n}\nconst comparator = (nodeA, nodeB) => {\n\n    const a = nodeA.dis;\n    const b = nodeB.dis;\n    return (a < b ? 1 : a > b ? -1 : 0);    \n}\n\nexport function dijkstra(grid, start, end) {\n    const visitedNodesInOrder = [];\n    start.distance = 0;\n    \n    const pq = new PriorityQueue({comparator});\n    pq.push(new Pair(0, start));\n    while (pq.isEmpty() === false) {\n        \n        const from = pq.top().cell;\n        const pq_dis = pq.top().dis;\n        pq.pop();\n      \n      if(pq_dis > from.distance) continue;\n      if (from.isWall) continue;\n      if (from === end) return visitedNodesInOrder;\n      const neighbors = getChildren(from, grid);\n      \n      console.log(from);\n      visitedNodesInOrder.push(from);\n      for (const to of neighbors) {\n          if( pq_dis + 1  < to.distance ){\n              to.distance = from.distance + 1;\n              to.previousNode = from;\n              pq.push(new Pair(to.distance, to));\n              console.log(pq);\n            }\n      }\n    }\n    return visitedNodesInOrder;\n  }\n  \n  function getChildren(node, grid) {\n    const children = [];\n    const {col, row} = node;\n    if (row < grid.length - 1) children.push(grid[row + 1][col]);\n    if (row > 0) children.push(grid[row - 1][col]);\n    if (col < grid[0].length - 1) children.push(grid[row][col + 1]);\n    if (col > 0) children.push(grid[row][col - 1]);\n    return children;\n  }\n  \n  export function getShortestPath(end) {\n    const path = [];\n    let curr = end;\n    while (curr !== null) {\n      path.unshift(curr);\n      curr = curr.previousNode;\n    }\n    return path;\n  }"]},"metadata":{},"sourceType":"module"}