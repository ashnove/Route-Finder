{"ast":null,"code":"var _jsxFileName = \"/home/ashnove/Documents/PROJECT MATERIALS/PathFinding Demo/pathfind/src/simulator/simulator.jsx\";\nimport React, { Component } from \"react\";\nimport \"./simulator.css\";\nimport Cell from \"./Cell/Cell\";\nimport { Button, Navbar } from \"react-bootstrap\";\nimport { dijkstra, getShortestPath } from \"./Algorithms/dikjstra\";\nimport { depthFirstSearch, getPath } from \"./Algorithms/dfs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst row_start = 12;\nconst col_start = 1;\nconst row_end = 12;\nconst col_end = 52;\nexport default class RouteFinder extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    let grid = makeGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = toggleWall(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = toggleWall(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  runSimulation(allPath, reqPath) {\n    for (let i = 0; i <= allPath.length; i++) {\n      if (i === allPath.length) {\n        setTimeout(() => {\n          this.runShortestPath(reqPath);\n        }, 10 * i);\n        return;\n      }\n\n      const node = allPath[i];\n      if (row_start === node.row && col_start === node.col) continue;\n      let nodeState = `cell visited-cell`;\n      if (node.isEnd) nodeState = `cell end-cell visited-cell`;\n      console.log(`animating`);\n      setTimeout(() => {\n        document.getElementById(`node-${node.row}-${node.col}`).className = nodeState;\n      }, 10 * i);\n    }\n  }\n\n  runShortestPath(reqPath) {\n    for (let i = 0; i < reqPath.length; i++) {\n      const node = reqPath[i];\n      if (row_start === node.row && col_start === node.col) continue;\n      setTimeout(() => {\n        let nodeState = `node node-shortest-path`;\n        if (node.isEnd) nodeState = `node node-finish node-shortest-path`;\n        document.getElementById(`node-${node.row}-${node.col}`).className = nodeState;\n      }, 50 * i);\n    }\n  }\n\n  performDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const start = grid[row_start][col_start];\n    const end = grid[row_end][col_end];\n    const allPath = dijkstra(grid, start, end);\n    const reqPath = getShortestPath(end);\n    this.runSimulation(allPath, reqPath);\n  }\n\n  performDFS() {\n    const {\n      grid\n    } = this.state;\n    const start = grid[row_start][col_start];\n    const end = grid[row_end][col_end];\n    const allPath = depthFirstSearch(start, end, grid);\n    const reqPath = getPath(end);\n    this.runSimulation(allPath, reqPath);\n  }\n\n  clearBoard() {\n    const {\n      grid\n    } = this.state;\n    const newGrid = grid.slice();\n\n    for (let row = 0; row < 24; row++) {\n      for (let col = 0; col < 54; col++) {\n        const node = newGrid[row][col];\n        const newNode = { ...node,\n          isWall: false,\n          isStart: row_start === row && col_start === col ? true : false,\n          isEnd: row_end === row && col_end === col ? true : false\n        };\n        newGrid[row][col] = newNode;\n      }\n    }\n\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  fullWall() {\n    for (let row = 0; row < 24; row++) {\n      for (let col = 0; col < 54; col++) {\n        if (row_start === row && col_start === col) continue;\n        if (row_end === row && col_end === col) continue;\n        const newGrid = toggleWall(this.state.grid, row, col, true);\n        this.setState({\n          grid: newGrid\n        });\n      }\n    }\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        bg: \"dark\",\n        variant: \"dark\",\n        children: [/*#__PURE__*/_jsxDEV(Navbar.Brand, {\n          href: \"root\",\n          children: \"Route Finder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"topRow\",\n          variant: \"light\",\n          onClick: () => this.performDijkstra(),\n          children: \"Dijkstra's Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n          className: \"topRow\",\n          variant: \"light\",\n          onClick: () => this.performDFS(),\n          children: \"Depth First Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n          className: \"topRow\",\n          variant: \"secondary\",\n          onClick: () => this.clearBoard(),\n          children: \"Draw Maze\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(Button, {\n          className: \"topRow\",\n          variant: \"secondary\",\n          onClick: () => this.fullWall(),\n          children: \"Draw Path\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"sidebar\",\n          href: \"root\",\n          variant: \"warning\",\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: grid.map((row, rowIdx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: row.map((cell, cellID) => {\n              const {\n                row,\n                col,\n                isEnd,\n                isStart,\n                isWall\n              } = cell;\n              return /*#__PURE__*/_jsxDEV(Cell, {\n                col: col,\n                isEnd: isEnd,\n                isStart: isStart,\n                isWall: isWall,\n                mouseIsPressed: mouseIsPressed,\n                onMouseDown: (row, col) => this.handleMouseDown(row, col),\n                onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n                onMouseUp: () => this.handleMouseUp(),\n                row: row\n              }, cellID, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 29\n              }, this);\n            })\n          }, rowIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 21\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nlet makeGrid = () => {\n  let grid = [];\n\n  for (let row = 0; row < 24; row++) {\n    let currentRow = [];\n\n    for (let col = 0; col < 54; col++) {\n      currentRow.push(createCell(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createCell = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === row_start && col === col_start,\n    isEnd: row === row_end && col === col_end,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nlet toggleWall = (grid, row, col, allWall = false) => {\n  const newGrid = grid.slice();\n  const cell = newGrid[row][col];\n  const cellUpdated = { ...cell,\n    isWall: allWall ? true : !cell.isWall\n  };\n  newGrid[row][col] = cellUpdated;\n  return newGrid;\n};","map":{"version":3,"sources":["/home/ashnove/Documents/PROJECT MATERIALS/PathFinding Demo/pathfind/src/simulator/simulator.jsx"],"names":["React","Component","Cell","Button","Navbar","dijkstra","getShortestPath","depthFirstSearch","getPath","row_start","col_start","row_end","col_end","RouteFinder","constructor","state","grid","mouseIsPressed","componentDidMount","makeGrid","setState","handleMouseDown","row","col","newGrid","toggleWall","handleMouseEnter","handleMouseUp","runSimulation","allPath","reqPath","i","length","setTimeout","runShortestPath","node","nodeState","isEnd","console","log","document","getElementById","className","performDijkstra","start","end","performDFS","clearBoard","slice","newNode","isWall","isStart","fullWall","render","map","rowIdx","cell","cellID","currentRow","push","createCell","distance","Infinity","isVisited","previousNode","allWall","cellUpdated"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./simulator.css\";\nimport Cell from \"./Cell/Cell\";\nimport { Button, Navbar } from \"react-bootstrap\";\nimport { dijkstra, getShortestPath } from \"./Algorithms/dikjstra\";\nimport { depthFirstSearch, getPath } from \"./Algorithms/dfs\";\n\nconst row_start = 12;\nconst col_start = 1;\nconst row_end = 12;\nconst col_end = 52;\n\nexport default class RouteFinder extends Component {\n    constructor() {\n        super();\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n    };\n}\n\ncomponentDidMount() {\n    let grid = makeGrid();\n    this.setState({ grid });\n}\n\nhandleMouseDown(row, col) {\n    const newGrid = toggleWall(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n}\n\nhandleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = toggleWall(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n}\n\nhandleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n}\n\nrunSimulation(allPath, reqPath) {\n    for (let i = 0; i <= allPath.length ; i++) {\n        \n        if (i === allPath.length) {\n            setTimeout(() => {\n                this.runShortestPath(reqPath);\n            }, 10 * i);\n            return;\n        }\n\n        const node = allPath[i];\n        if(row_start===node.row && col_start===node.col) continue;\n        let nodeState = `cell visited-cell`;\n        if(node.isEnd)\n            nodeState = `cell end-cell visited-cell`\n        \n        console.log(`animating`);\n        setTimeout(() => {\n            document.getElementById(`node-${node.row}-${node.col}`).className = nodeState;\n        }, 10 * i);\n    }\n}\n\nrunShortestPath(reqPath) {\n    for (let i = 0; i < reqPath.length ; i++) {\n        const node = reqPath[i];\n        if(row_start===node.row && col_start===node.col) continue;\n        setTimeout(() => {\n            let nodeState = `node node-shortest-path`;\n            if(node.isEnd)\n                nodeState = `node node-finish node-shortest-path`\n            document.getElementById(`node-${node.row}-${node.col}`).className = nodeState;\n        }, 50 * i);\n    }\n}\n\nperformDijkstra() {\n    const { grid } = this.state;\n    const start = grid[row_start][col_start];\n    const end = grid[row_end][col_end];\n    const allPath = dijkstra(grid, start, end);\n    const reqPath = getShortestPath(end);\n    this.runSimulation(allPath, reqPath)\n}\n\nperformDFS(){\n    const { grid } = this.state;\n    const start = grid[row_start][col_start];\n    const end = grid[row_end][col_end];\n    const allPath = depthFirstSearch(start, end, grid);\n    const reqPath = getPath(end);\n    this.runSimulation(allPath, reqPath);\n}\nclearBoard() {\n    const { grid } = this.state;\n    const newGrid = grid.slice();\n    for (let row = 0; row < 24; row++) {\n      for (let col = 0; col < 54; col++) {\n        const node = newGrid[row][col];\n        const newNode = {\n          ...node,\n          isWall: false,\n          isStart: row_start===row && col_start===col ? true : false,\n          isEnd: row_end===row && col_end===col ? true : false\n        };\n        newGrid[row][col] = newNode;\n      }\n    }\n    this.setState({ grid: newGrid });\n}\n\nfullWall() {\n    for (let row = 0; row < 24; row++) {\n      for (let col = 0; col < 54; col++) {\n        if(row_start===row && col_start===col) continue;\n        if(row_end===row && col_end===col) continue;\n        const newGrid = toggleWall(this.state.grid, row, col, true);\n        this.setState({ grid: newGrid });\n      }\n    }\n}\n\nrender() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"root\">Route Finder</Navbar.Brand>\n          <Button className=\"topRow\" variant=\"light\" onClick={() => this.performDijkstra()}>\n            Dijkstra's Algorithm\n          </Button>{\" \"}\n          <Button className=\"topRow\" variant=\"light\" onClick={() => this.performDFS()}>\n            Depth First Search\n          </Button>{\" \"}\n          <Button className=\"topRow\" variant=\"secondary\" onClick={() => this.clearBoard()}>\n            Draw Maze\n          </Button>{\" \"}\n          <Button className=\"topRow\" variant=\"secondary\" onClick={() => this.fullWall()} >\n            Draw Path\n          </Button>\n          <Button className=\"sidebar\" href=\"root\" variant=\"warning\">\n            Reset\n          </Button>\n        </Navbar>\n\n        <div className=\"col\">\n            {\n                grid.map((row, rowIdx) => {\n                return (\n                    <div className = \"row\" key={rowIdx}>\n                    {\n                        row.map((cell, cellID) => {\n                        const { row, col, isEnd, isStart, isWall } = cell;\n                        \n                        return (\n                            <Cell\n                            key={cellID}\n                            col={col}\n                            isEnd={isEnd}\n                            isStart={isStart}\n                            isWall={isWall}\n                            mouseIsPressed={mouseIsPressed}\n                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                            onMouseEnter={(row, col) =>\n                                this.handleMouseEnter(row, col)\n                            }\n                            onMouseUp={() => this.handleMouseUp()}\n                            row={row}\n                            ></Cell>\n                            \n                        );                    \n                    })}\n                </div>\n                );\n            })}\n        </div>\n      </>\n    );\n  }\n}\n\nlet makeGrid = () => {\n    let grid = [];\n    for (let row = 0; row < 24; row++) {\n        let currentRow = [];\n        for (let col = 0; col < 54; col++) {\n            currentRow.push(createCell(col, row));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n\nconst createCell = (col, row) => {\n    return {\n        col,\n        row,\n        isStart: row === row_start && col === col_start,\n        isEnd: row === row_end && col === col_end,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null,\n    };\n};\n\nlet toggleWall = (grid, row, col, allWall = false) => {\n    const newGrid = grid.slice();\n    const cell = newGrid[row][col];\n    const cellUpdated = {\n        ...cell,\n        isWall: allWall ? true : !cell.isWall\n    };\n    newGrid[row][col] = cellUpdated;\n    return newGrid;\n};\n\n"]},"metadata":{},"sourceType":"module"}