{"version":3,"sources":["simulator/Cell/Cell.jsx","simulator/Algorithms/dikjstra.js","simulator/Algorithms/dfs.js","simulator/simulator.jsx","App.js","reportWebVitals.js","index.js"],"names":["Cell","this","props","col","row","isEnd","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","className","Component","Pair","dis","cell","comparator","nodeA","nodeB","a","b","getChildren","node","grid","children","length","push","dfsTree","ok","dfs","from","end","isVisited","to","previousNode","depthFirstSearch","start","row_start","RouteFinder","state","mouseIsPressed","makeGrid","setState","newGrid","toggleWall","allPath","reqPath","i","setTimeout","runFinalRoute","nodeState","console","log","document","getElementById","visitedNodesInOrder","distance","pq","PriorityQueue","isEmpty","top","pq_dis","pop","dijkstra","path","curr","unshift","getShortestPath","runSimulation","getPath","slice","newNode","Navbar","bg","variant","Brand","href","Button","onClick","performDijkstra","performDFS","clearBoard","fullWall","map","rowIdx","cellID","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createCell","Infinity","allWall","cellUpdated","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"6SAGqBA,E,4JACjB,WACI,MAAiFC,KAAKC,MAA/EC,EAAP,EAAOA,IAAKC,EAAZ,EAAYA,IAAKC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,QAASC,EAAjC,EAAiCA,OAAQC,EAAzC,EAAyCA,YAAaC,EAAtD,EAAsDA,aAAcC,EAApE,EAAoEA,UAChEC,EAAiB,GAKrB,OAJGN,IAAOM,EAAiB,YACxBL,IAASK,EAAiB,cAC1BJ,IAAQI,EAAiB,aAGxB,qBACIC,GAAE,eAAUR,EAAV,YAAiBD,GACnBU,UAAS,eAAUF,GACnBH,YAAa,kBAAMA,EAAYJ,EAAKD,IACpCM,aAAc,kBAAMA,EAAaL,EAAKD,IACtCO,UAAW,kBAAMA,W,GAdCI,a,gCCD5BC,EACF,WAAYC,EAAKC,GAAM,oBACnBhB,KAAKgB,KAAOA,EACZhB,KAAKe,IAAMA,GAGbE,EAAa,SAACC,EAAOC,GACvB,IAAMC,EAAIF,EAAMH,IACVM,EAAIF,EAAMJ,IAChB,OAAQK,EAAIC,EAAI,EAAID,EAAIC,GAAK,EAAI,GAyCrC,SAASC,EAAYC,EAAMC,GACvB,IAAMC,EAAW,GACVvB,EAAYqB,EAAZrB,IAAKC,EAAOoB,EAAPpB,IAKZ,OAJIA,EAAMqB,EAAKE,OAAS,GAAGD,EAASE,KAAKH,EAAKrB,EAAM,GAAGD,IACnDC,EAAM,GAAGsB,EAASE,KAAKH,EAAKrB,EAAM,GAAGD,IACrCA,EAAMsB,EAAK,GAAGE,OAAS,GAAGD,EAASE,KAAKH,EAAKrB,GAAKD,EAAM,IACxDA,EAAM,GAAGuB,EAASE,KAAKH,EAAKrB,GAAKD,EAAM,IACpCuB,EC3DX,IAAMG,EAAU,GACZC,EAAK,EACT,SAASC,EAAIC,EAAMP,EAAMQ,GACrBD,EAAKE,WAAY,EACjB,IAFyB,EAEnBR,EAyBV,SAAqBF,EAAMC,GACvB,IAAMC,EAAW,GACVvB,EAAYqB,EAAZrB,IAAKC,EAAOoB,EAAPpB,IACRA,EAAMqB,EAAKE,OAAS,GAAGD,EAASE,KAAKH,EAAKrB,EAAM,GAAGD,IACnDA,EAAMsB,EAAK,GAAGE,OAAS,GAAGD,EAASE,KAAKH,EAAKrB,GAAKD,EAAM,IACxDC,EAAM,GAAGsB,EAASE,KAAKH,EAAKrB,EAAM,GAAGD,IACrCA,EAAM,GAAGuB,EAASE,KAAKH,EAAKrB,GAAKD,EAAM,IAC3C,OAAOuB,EAhCUH,CAAYS,EAAMP,GAFV,cAGTC,GAHS,IAGzB,IAAI,EAAJ,qBAAyB,CAAC,IAAhBS,EAAe,QACrB,IAAGA,EAAG5B,OAAN,CACA,GAAGuB,EAAI,OACP,IAAIK,EAAGD,UAAU,CAGb,GAFAL,EAAQD,KAAKI,GACbG,EAAGC,aAAeJ,EACfG,IAAOF,EAAgB,YAATH,EAAK,GACtBC,EAAII,EAAIV,EAAMQ,MAVG,+BActB,SAASI,EAAiBC,EAAOL,EAAKR,GAEzC,OADAM,EAAIO,EAAOb,EAAMQ,GACVJ,ECXX,IAAMU,EAAY,GAKGC,E,kDACjB,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACThB,KAAM,GACNiB,gBAAgB,GAJV,E,qDAQlB,WACI,IAAIjB,EAAOkB,IACX1C,KAAK2C,SAAS,CAAEnB,W,6BAGpB,SAAgBrB,EAAKD,GACjB,IAAM0C,EAAUC,EAAW7C,KAAKwC,MAAMhB,KAAMrB,EAAKD,GACjDF,KAAK2C,SAAS,CAAEnB,KAAMoB,EAASH,gBAAgB,M,8BAGnD,SAAiBtC,EAAKD,GAClB,GAAKF,KAAKwC,MAAMC,eAAhB,CACA,IAAMG,EAAUC,EAAW7C,KAAKwC,MAAMhB,KAAMrB,EAAKD,GACjDF,KAAK2C,SAAS,CAAEnB,KAAMoB,O,2BAG1B,WACI5C,KAAK2C,SAAS,CAAEF,gBAAgB,M,2BAGpC,SAAcK,EAASC,GACnB,IAD6B,IAAD,kBACnBC,GAEL,GAAIA,IAAMF,EAAQpB,OAId,OAHAuB,YAAW,WACP,EAAKC,cAAcH,KACpB,GAAKC,GACF,CAAN,UAGJ,IAAMzB,EAAOuB,EAAQE,GACrB,GAAGV,IAAYf,EAAKpB,KA5CV,IA4C6BoB,EAAKrB,IAAK,iBACjD,IAAIiD,EAAS,oBACV5B,EAAKnB,QACJ+C,EAAS,8BAEbC,QAAQC,IAAR,aACAJ,YAAW,WACPK,SAASC,eAAT,eAAgChC,EAAKpB,IAArC,YAA4CoB,EAAKrB,MAAOU,UAAYuC,IACrE,GAAKH,IAlBHA,EAAI,EAAGA,GAAKF,EAAQpB,OAASsB,IAAK,CAAC,IAAD,IAAlCA,GAAkC,qD,2BAsB/C,SAAcD,GACV,IADoB,IAAD,WACVC,GACL,IAAMzB,EAAOwB,EAAQC,GACrB,GAAGV,IAAYf,EAAKpB,KA3DV,IA2D6BoB,EAAKrB,IAAK,iBACjD+C,YAAW,WACP,IAAIE,EAAS,kBACV5B,EAAKnB,QACJ+C,EAAS,4BACbG,SAASC,eAAT,eAAgChC,EAAKpB,IAArC,YAA4CoB,EAAKrB,MAAOU,UAAYuC,IACrE,GAAKH,IARHA,EAAI,EAAGA,EAAID,EAAQrB,OAASsB,IAAK,EAAjCA,K,6BAYb,WACI,IAAQxB,EAASxB,KAAKwC,MAAdhB,KACFa,EAAQb,EAAKc,IAvEL,GAwERN,EAAMR,EAvEA,IACA,IAuENsB,EFpEH,SAAkBtB,EAAMa,EAAOL,GAClC,IAAMwB,EAAsB,GAC5BnB,EAAMoB,SAAW,EAEjB,IAAMC,EAAK,IAAIC,IAAc,CAAC1C,eAE9B,IADAyC,EAAG/B,KAAK,IAAIb,EAAK,EAAGuB,KACI,IAAjBqB,EAAGE,WAAqB,CAE3B,IAAM7B,EAAO2B,EAAGG,MAAM7C,KAChB8C,EAASJ,EAAGG,MAAM9C,IAGxB,GAFA2C,EAAGK,QAEAD,EAAS/B,EAAK0B,YACb1B,EAAKzB,OAAT,CACA,GAAIyB,IAASC,EAAK,OAAOwB,EACzB,IAAM/B,EAAWH,EAAYS,EAAMP,GAEnC4B,QAAQC,IAAItB,GACZyB,EAAoB7B,KAAKI,GAZE,oBAaVN,GAbU,IAa3B,2BAA2B,CAAC,IAAjBS,EAAgB,QACnB4B,EAAS,EAAK5B,EAAGuB,WACjBvB,EAAGuB,SAAW1B,EAAK0B,SAAW,EAC9BvB,EAAGC,aAAeJ,EAClB2B,EAAG/B,KAAK,IAAIb,EAAKoB,EAAGuB,SAAUvB,IAC9BkB,QAAQC,IAAIK,KAlBO,gCAsB/B,OAAOF,EEwCSQ,CAASxC,EAAMa,EAAOL,GAChCe,EFvCH,SAAyBf,GAG5B,IAFA,IAAMiC,EAAO,GACTC,EAAOlC,EACK,OAATkC,GACLD,EAAKE,QAAQD,GACbA,EAAOA,EAAK/B,aAEd,OAAO8B,EEgCSG,CAAgBpC,GAChChC,KAAKqE,cAAcvB,EAASC,K,wBAGhC,WACI,IAAQvB,EAASxB,KAAKwC,MAAdhB,KACFa,EAAQb,EAAKc,IAhFL,GAiFRN,EAAMR,EAhFA,IACA,IAgFNsB,EAAUV,EAAiBC,EAAOL,EAAKR,GACvCuB,EDvEH,SAAiBf,GAGpB,IAFA,IAAMiC,EAAO,GACTC,EAAOlC,EACK,OAATkC,GACLD,EAAKE,QAAQD,GACbA,EAAOA,EAAK/B,aAEd,OAAO8B,ECgESK,CAAQtC,GACxBhC,KAAKqE,cAAcvB,EAASC,K,wBAGhC,WAGI,IAFA,IACMH,EADW5C,KAAKwC,MAAdhB,KACa+C,QACZpE,EAAM,EAAGA,EAAM,GAAIA,IAC1B,IAAK,IAAID,EAAM,EAAGA,EAAM,GAAIA,IAAO,CACjC,IAAMqB,EAAOqB,EAAQzC,GAAKD,GACpBsE,EAAO,2BACRjD,GADQ,IAEXjB,QAAQ,EACRD,QAASiC,IAAYnC,GAhGb,IAgGgCD,EACxCE,MAhGM,KAgGWD,GA/FX,KA+F4BD,IAEpC0C,EAAQzC,GAAKD,GAAOsE,EAGxBxE,KAAK2C,SAAS,CAAEnB,KAAMoB,M,sBAG1B,WACI,IAAK,IAAIzC,EAAM,EAAGA,EAAM,GAAIA,IAC1B,IAAK,IAAID,EAAM,EAAGA,EAAM,GAAIA,IAC1B,IAAGoC,IAAYnC,GA5GL,IA4GwBD,KA3G1B,KA4GKC,GA3GL,KA2GsBD,GAA9B,CACA,IAAM0C,EAAUC,EAAW7C,KAAKwC,MAAMhB,KAAMrB,EAAKD,GAAK,GACtDF,KAAK2C,SAAS,CAAEnB,KAAMoB,O,oBAK9B,WAAU,IAAD,OACL,EAAiC5C,KAAKwC,MAA9BhB,EAAR,EAAQA,KAAMiB,EAAd,EAAcA,eAEd,OACE,qCACE,eAACgC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAA1B,UACE,cAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,OAAnB,0BACA,cAACC,EAAA,EAAD,CAAQlE,UAAU,SAAS+D,QAAQ,QAAQI,QAAS,kBAAM,EAAKC,mBAA/D,kCAEU,IACV,cAACF,EAAA,EAAD,CAAQlE,UAAU,SAAS+D,QAAQ,QAAQI,QAAS,kBAAM,EAAKE,cAA/D,gCAEU,IACV,cAACH,EAAA,EAAD,CAAQlE,UAAU,SAAS+D,QAAQ,YAAYI,QAAS,kBAAM,EAAKG,cAAnE,uBAEU,IACV,cAACJ,EAAA,EAAD,CAAQlE,UAAU,SAAS+D,QAAQ,YAAYI,QAAS,kBAAM,EAAKI,YAAnE,uBAGA,cAACL,EAAA,EAAD,CAAQlE,UAAU,UAAUiE,KAAK,OAAOF,QAAQ,UAAhD,sBAKF,qBAAK/D,UAAU,MAAf,SAEQY,EAAK4D,KAAI,SAACjF,EAAKkF,GACf,OACI,qBAAKzE,UAAY,MAAjB,SAEIT,EAAIiF,KAAI,SAACpE,EAAMsE,GACf,IAAQnF,EAAqCa,EAArCb,IAAKD,EAAgCc,EAAhCd,IAAKE,EAA2BY,EAA3BZ,MAAOC,EAAoBW,EAApBX,QAASC,EAAWU,EAAXV,OAElC,OACI,cAAC,EAAD,CACAH,IAAKA,EAAkBD,IAAKA,EAAKI,OAAQA,EAAQD,QAASA,EAASD,MAAOA,EAAOqC,eAAgBA,EACjGlC,YAAa,SAACJ,EAAKD,GAAN,OAAc,EAAKqF,gBAAgBpF,EAAKD,IACrDM,aAAc,SAACL,EAAKD,GAAN,OAAc,EAAKsF,iBAAiBrF,EAAKD,IACvDO,UAAW,kBAAM,EAAKgF,kBAHPH,OAPKD,e,GA5IPxE,aAmKrC6B,EAAW,WAEX,IADA,IAAIlB,EAAO,GACFrB,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAE/B,IADA,IAAIuF,EAAa,GACRxF,EAAM,EAAGA,EAAM,GAAIA,IACxBwF,EAAW/D,KAAKgE,EAAWzF,EAAKC,IAEpCqB,EAAKG,KAAK+D,GAEd,OAAOlE,GAGLmE,EAAa,SAACzF,EAAKC,GACrB,MAAO,CACHD,MACAC,MACAE,QAASF,IAAQmC,GAvLP,IAuLoBpC,EAC9BE,MAvLQ,KAuLDD,GAtLC,KAsLkBD,EAC1BuD,SAAUmC,IACV3D,WAAW,EACX3B,QAAQ,EACR6B,aAAc,OAIlBU,EAAa,SAACrB,EAAMrB,EAAKD,GAA0B,IAArB2F,EAAoB,wDAC5CjD,EAAUpB,EAAK+C,QACfvD,EAAO4B,EAAQzC,GAAKD,GACpB4F,EAAW,2BACV9E,GADU,IAEbV,SAAQuF,IAAkB7E,EAAKV,SAGnC,OADAsC,EAAQzC,GAAKD,GAAO4F,EACblD,GCpMImD,MATf,WACE,OACE,qBAAKnF,UAAU,MAAf,SACE,qBAAKA,UAAU,MAAf,SACA,cAAC,EAAD,SCKSoF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrD,SAASC,eAAe,SAE1ByC,M","file":"static/js/main.8b055822.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Cell.css';\n\nexport default class Cell extends Component {\n    render() {\n        const {col, row, isEnd, isStart, isWall, onMouseDown, onMouseEnter, onMouseUp} = this.props;\n        let extraClassName = '';\n        if(isEnd) extraClassName = 'end-cell';\n        if(isStart) extraClassName = 'start-cell';\n        if(isWall) extraClassName = 'wall-cell';\n\n        return (\n            <div\n                id={`cell-${row}-${col}`}\n                className={`cell ${extraClassName}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}>\n            </div>\n        );\n    }\n}\n","import PriorityQueue from \"priorityqueue\";\n\nclass Pair {\n    constructor(dis, cell){\n        this.cell = cell;\n        this.dis = dis;\n    }\n}\nconst comparator = (nodeA, nodeB) => {\n    const a = nodeA.dis;\n    const b = nodeB.dis;\n    return (a < b ? 1 : a > b ? -1 : 0);    \n}\nexport function dijkstra(grid, start, end) {\n    const visitedNodesInOrder = [];\n    start.distance = 0;\n    \n    const pq = new PriorityQueue({comparator});\n    pq.push(new Pair(0, start));\n    while (pq.isEmpty() === false) {\n        \n        const from = pq.top().cell;\n        const pq_dis = pq.top().dis;\n        pq.pop();\n      \n        if(pq_dis > from.distance) continue;\n        if (from.isWall) continue;\n        if (from === end) return visitedNodesInOrder;\n        const children = getChildren(from, grid);\n        \n        console.log(from);\n        visitedNodesInOrder.push(from);\n        for (const to of children) {\n            if( pq_dis + 1  < to.distance ){\n                to.distance = from.distance + 1;\n                to.previousNode = from;\n                pq.push(new Pair(to.distance, to));\n                console.log(pq);\n                }\n        }\n    }\n    return visitedNodesInOrder;\n}\nexport function getShortestPath(end) {\n    const path = [];\n    let curr = end;\n    while (curr !== null) {\n      path.unshift(curr);\n      curr = curr.previousNode;\n    }\n    return path;\n}\nfunction getChildren(node, grid) {\n    const children = [];\n    const {col, row} = node;\n    if (row < grid.length - 1) children.push(grid[row + 1][col]);\n    if (row > 0) children.push(grid[row - 1][col]);\n    if (col < grid[0].length - 1) children.push(grid[row][col + 1]);\n    if (col > 0) children.push(grid[row][col - 1]);\n    return children;\n}\n  ","const dfsTree = [];\nlet ok = 0;\nfunction dfs(from, grid, end){\n    from.isVisited = true;\n    const children = getChildren(from, grid);\n    for(const to of children){\n        if(to.isWall) continue;\n        if(ok) return;\n        if(!to.isVisited){\n            dfsTree.push(from);\n            to.previousNode = from;\n            if(to === end) { ok = 1 ; return;}\n            dfs(to, grid, end);  \n        }\n    }\n}\nexport function depthFirstSearch(start, end, grid){\n    dfs(start, grid, end);\n    return dfsTree;\n}\nexport function getPath(end) {\n    const path = [];\n    let curr = end;\n    while (curr !== null) {\n      path.unshift(curr);\n      curr = curr.previousNode;\n    }\n    return path;\n}\nfunction getChildren(node, grid) {\n    const children = [];\n    const {col, row} = node;\n    if (row < grid.length - 1) children.push(grid[row + 1][col]);\n    if (col < grid[0].length - 1) children.push(grid[row][col + 1]);\n    if (row > 0) children.push(grid[row - 1][col]);\n    if (col > 0) children.push(grid[row][col - 1]);\n    return children;\n}","import React, { Component } from \"react\";\nimport \"./simulator.css\";\nimport Cell from \"./Cell/Cell\";\nimport { Button, Navbar } from \"react-bootstrap\";\nimport { dijkstra, getShortestPath } from \"./Algorithms/dikjstra\";\nimport { depthFirstSearch, getPath } from \"./Algorithms/dfs\";\n\nconst row_start = 12;\nconst col_start = 1;\nconst row_end = 12;\nconst col_end = 52;\n\nexport default class RouteFinder extends Component {\n    constructor() {\n        super();\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n    };\n}\n\ncomponentDidMount() {\n    let grid = makeGrid();\n    this.setState({ grid });\n}\n\nhandleMouseDown(row, col) {\n    const newGrid = toggleWall(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n}\n\nhandleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = toggleWall(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n}\n\nhandleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n}\n\nrunSimulation(allPath, reqPath) {\n    for (let i = 0; i <= allPath.length ; i++) {\n        \n        if (i === allPath.length) {\n            setTimeout(() => {\n                this.runFinalRoute(reqPath);\n            }, 10 * i);\n            return;\n        }\n\n        const node = allPath[i];\n        if(row_start===node.row && col_start===node.col) continue;\n        let nodeState = `cell visited-cell`;\n        if(node.isEnd)\n            nodeState = `cell end-cell visited-cell`\n        \n        console.log(`animating`);\n        setTimeout(() => {\n            document.getElementById(`cell-${node.row}-${node.col}`).className = nodeState;\n        }, 10 * i);\n    }\n}\n\nrunFinalRoute(reqPath) {\n    for (let i = 0; i < reqPath.length ; i++) {\n        const node = reqPath[i];\n        if(row_start===node.row && col_start===node.col) continue;\n        setTimeout(() => {\n            let nodeState = `cell final-cell`;\n            if(node.isEnd)\n                nodeState = `cell end-cell final-cell`\n            document.getElementById(`cell-${node.row}-${node.col}`).className = nodeState;\n        }, 50 * i);\n    }\n}\n\nperformDijkstra() {\n    const { grid } = this.state;\n    const start = grid[row_start][col_start];\n    const end = grid[row_end][col_end];\n    const allPath = dijkstra(grid, start, end);\n    const reqPath = getShortestPath(end);\n    this.runSimulation(allPath, reqPath)\n}\n\nperformDFS(){\n    const { grid } = this.state;\n    const start = grid[row_start][col_start];\n    const end = grid[row_end][col_end];\n    const allPath = depthFirstSearch(start, end, grid);\n    const reqPath = getPath(end);\n    this.runSimulation(allPath, reqPath);\n}\n\nclearBoard() {\n    const { grid } = this.state;\n    const newGrid = grid.slice();\n    for (let row = 0; row < 24; row++) {\n      for (let col = 0; col < 54; col++) {\n        const node = newGrid[row][col];\n        const newNode = {\n          ...node,\n          isWall: false,\n          isStart: row_start===row && col_start===col ? true : false,\n          isEnd: row_end===row && col_end===col ? true : false\n        };\n        newGrid[row][col] = newNode;\n      }\n    }\n    this.setState({ grid: newGrid });\n}\n\nfullWall() {\n    for (let row = 0; row < 24; row++) {\n      for (let col = 0; col < 54; col++) {\n        if(row_start===row && col_start===col) continue;\n        if(row_end===row && col_end===col) continue;\n        const newGrid = toggleWall(this.state.grid, row, col, true);\n        this.setState({ grid: newGrid });\n      }\n    }\n}\n\nrender() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <>\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"root\">Route Finder</Navbar.Brand>\n          <Button className=\"topRow\" variant=\"light\" onClick={() => this.performDijkstra()}>\n            Dijkstra's Algorithm\n          </Button>{\" \"}\n          <Button className=\"topRow\" variant=\"light\" onClick={() => this.performDFS()}>\n            Depth First Search\n          </Button>{\" \"}\n          <Button className=\"topRow\" variant=\"secondary\" onClick={() => this.clearBoard()}>\n            Draw Maze\n          </Button>{\" \"}\n          <Button className=\"topRow\" variant=\"secondary\" onClick={() => this.fullWall()} >\n            Draw Path\n          </Button>\n          <Button className=\"sidebar\" href=\"root\" variant=\"warning\">\n            Reset\n          </Button>\n        </Navbar>\n\n        <div className=\"col\">\n            {\n                grid.map((row, rowIdx) => {\n                return (\n                    <div className = \"row\" key={rowIdx}>\n                    {\n                        row.map((cell, cellID) => {\n                        const { row, col, isEnd, isStart, isWall } = cell;\n                        \n                        return (\n                            <Cell\n                            row={row} key={cellID} col={col} isWall={isWall} isStart={isStart} isEnd={isEnd} mouseIsPressed={mouseIsPressed}\n                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                            onMouseUp={() => this.handleMouseUp()}\n                            ></Cell>                            \n                        );                    \n                    })}\n                </div>\n                );\n            })}\n        </div>\n      </>\n    );\n  }\n}\n\nlet makeGrid = () => {\n    let grid = [];\n    for (let row = 0; row < 24; row++) {\n        let currentRow = [];\n        for (let col = 0; col < 54; col++) {\n            currentRow.push(createCell(col, row));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n\nconst createCell = (col, row) => {\n    return {\n        col,\n        row,\n        isStart: row === row_start && col === col_start,\n        isEnd: row === row_end && col === col_end,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        previousNode: null,\n    };\n};\n\nlet toggleWall = (grid, row, col, allWall = false) => {\n    const newGrid = grid.slice();\n    const cell = newGrid[row][col];\n    const cellUpdated = {\n        ...cell,\n        isWall: allWall ? true : !cell.isWall\n    };\n    newGrid[row][col] = cellUpdated;\n    return newGrid;\n};\n\n","import './App.css';\nimport RouteFinder from './simulator/simulator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App\">\n      <RouteFinder></RouteFinder>\n    </div>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nreportWebVitals();\n"],"sourceRoot":""}